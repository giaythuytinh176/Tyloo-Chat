import { GroupService } from './../group/group.service';
import { AuthService } from './../auth/auth.service';
import { Server, Socket } from 'socket.io';
import { Repository } from 'typeorm';
import { Group, GroupMap } from '../group/entity/group.entity';
import { GroupMessage } from '../group/entity/groupMessage.entity';
import { UserMap } from '../friend/entity/friend.entity';
import { FriendMessage } from '../friend/entity/friendMessage.entity';
import { User } from './../user/entity/user.entity';
export declare class ChatGateway {
    private readonly userRepository;
    private readonly groupRepository;
    private readonly groupUserRepository;
    private readonly groupMessageRepository;
    private readonly friendRepository;
    private readonly friendMessageRepository;
    private readonly authService;
    private readonly groupService;
    constructor(userRepository: Repository<User>, groupRepository: Repository<Group>, groupUserRepository: Repository<GroupMap>, groupMessageRepository: Repository<GroupMessage>, friendRepository: Repository<UserMap>, friendMessageRepository: Repository<FriendMessage>, authService: AuthService, groupService: GroupService);
    server: Server;
    handleConnection(client: Socket): Promise<string>;
    handleDisconnect(client: Socket): Promise<any>;
    addGroup(client: Socket, data: GroupDto): Promise<any>;
    joinGroup(client: Socket, data: GroupMap): Promise<any>;
    joinGroupSocket(client: Socket, data: GroupMap): Promise<any>;
    sendGroupMessage(data: GroupMessageDto): Promise<any>;
    addFriend(client: Socket, data: UserFriendMap): Promise<any>;
    joinFriend(client: Socket, data: UserMap): Promise<any>;
    friendMessage(client: Socket, data: FriendMessageDto): Promise<any>;
    getReplyMessage(content: string): Promise<any>;
    autoReply(data: any, roomId: any): Promise<void>;
    getAllData(token: string): Promise<any>;
    exitGroup(client: Socket, groupMap: GroupMap): Promise<any>;
    exitFriend(client: Socket, userMap: UserMap): Promise<any>;
    revokeMessage(client: Socket, messageDto: GroupMessageDto & FriendMessageDto): Promise<any>;
    updateGroupNotice(data: GroupDto): Promise<any>;
    updateUserInfo(client: Socket, userId: any): Promise<any>;
    inviteFriendsIntoGroup(data: FriendsIntoGroup): Promise<any>;
}
